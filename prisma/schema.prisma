generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "linux-musl-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  password     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  reservations Reservation[]
}

model Restaurant {
  id                 String              @id @default(cuid())
  name               String
  description        String?
  address            String
  city               String
  state              String
  zipCode            String
  phone              String
  email              String              @unique
  website            String?
  cuisine            Cuisine
  profileImageUrl    String?
  bannerImageUrl     String?
  ownerId            String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  cancellationPolicy CancellationPolicy?
  operatingHours     OperatingHours[]
  reservations       Reservation[]
  specialPeriods     SpecialPeriod[]
  tables             Table[]
  turnTimeRules      TurnTimeRule[]
}

model Table {
  id           String        @id @default(cuid())
  restaurantId String
  name         String
  capacityMin  Int
  capacityMax  Int
  isJoinable   Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  reservations Reservation[]
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id])
}

model OperatingHours {
  id           String     @id @default(cuid())
  restaurantId String
  dayOfWeek    Int
  openTime     String
  closeTime    String
  turnTime     Int?
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@unique([restaurantId, dayOfWeek, openTime, closeTime])
}

// This is for holidays and other special periods
model SpecialPeriod {
  id           String     @id @default(cuid())
  restaurantId String
  name         String
  startDate    DateTime
  endDate      DateTime
  isBlackout   Boolean    @default(false)
  openTime     String?
  closeTime    String?
  turnTime     Int?
  notes        String?
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
}

model Reservation {
  id              String            @id @default(cuid())
  userId          String
  restaurantId    String
  tableId         String?
  reservationTime DateTime
  partySize       Int
  status          ReservationStatus @default(PENDING)
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  turnTimeUsed    Int
  restaurant      Restaurant        @relation(fields: [restaurantId], references: [id])
  table           Table?            @relation(fields: [tableId], references: [id])
  user            User              @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([restaurantId])
  @@index([tableId])
  @@index([reservationTime])
}

model CancellationPolicy {
  id                      String     @id @default(cuid())
  restaurantId            String     @unique
  hoursBeforeNoFee        Int?
  feePercentage           Float?
  fixedFeeAmount          Float?
  notes                   String?
  allowOnlineCancellation Boolean    @default(true)
  updatedAt               DateTime   @updatedAt
  restaurant              Restaurant @relation(fields: [restaurantId], references: [id])
}

model TurnTimeRule {
  id                String     @id @default(cuid())
  restaurantId      String
  partySizeMin      Int
  partySizeMax      Int
  turnTimeInMinutes Int
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  restaurant        Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([restaurantId, partySizeMin, partySizeMax])
  @@index([restaurantId])
}

enum Cuisine {
  ITALIAN
  MEXICAN
  CHINESE
  INDIAN
  FRENCH
  JAPANESE
  THAI
  GREEK
  SPANISH
  AMERICAN
  OTHER
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}
